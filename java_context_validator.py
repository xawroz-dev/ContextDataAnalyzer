import json
import os
import sys
import yaml
import re
from thefuzz import process
import pandas as pd

class JavaContextDataValidator:
    def __init__(self, config):
        self.config = config
        self.approved_variables = self.load_approved_variables()
        self.has_errors = False
        self.results = []

    def load_approved_variables(self):
        # Load approved variables from CSV
        df = pd.read_csv(self.config.approved_variables_file)
        return df['variable_name'].values

    def is_snake_case(self, key):
        return bool(re.match(r'^[a-z]+(_[a-z]+)*$', key))

    def validate_keys(self, data):
        for entry in data:
            key = entry['key']
            issues = []
            severity = None

            if key not in self.approved_variables:
                # Key is not in approved variables
                # Use fuzzy matching to suggest corrections
                result = process.extractOne(
                    key,
                    self.approved_variables,
                    score_cutoff=self.config.fuzzy_match_threshold
                )
                if result:
                    suggestion, score = result[0], result[1]
                else:
                    suggestion, score = 'No close match found', 'N/A'

                issues.append({
                    'type': 'Key not in approved dictionary',
                    'suggestion': suggestion,
                    'score': score,
                    'severity': self.config.checks['validate_context_data_keys']['severity']
                })
                if self.config.checks['validate_context_data_keys']['severity'] == 'error':
                    self.has_errors = True

                # Check if key is in snake_case
                if not self.is_snake_case(key):
                    issues.append({
                        'type': 'Key is not in snake_case',
                        'suggestion': 'Rename to snake_case',
                        'score': 'N/A',
                        'severity': self.config.checks['check_snake_case']['severity']
                    })
                    if self.config.checks['check_snake_case']['severity'] == 'error':
                        self.has_errors = True

            # If there are issues, add them to the results
            if issues:
                self.results.append({
                    'file_name': entry['file'],
                    'line_number': entry['line'],
                    'method': entry['method'],
                    'key': key,
                    'issues': issues
                })

    def generate_report(self):
        # Use Jinja2 to generate HTML report
        from jinja2 import Environment, FileSystemLoader
        env = Environment(loader=FileSystemLoader(os.path.dirname(self.config.template_file)))
        template = env.get_template(os.path.basename(self.config.template_file))
        html_content = template.render(results=self.results)
        with open(self.config.output_file, 'w') as f:
            f.write(html_content)

    def run(self):
        # Read the JSON file generated by the Java analyzer
        if not os.path.exists('context_data_keys.json'):
            print("context_data_keys.json not found. Please run the Java analyzer first.")
            sys.exit(1)

        with open('context_data_keys.json', 'r') as f:
            data = json.load(f)

        self.validate_keys(data)
        self.generate_report()

class Config:
    def __init__(self, config_file):
        with open(config_file, 'r') as f:
            cfg = yaml.safe_load(f)

        # Parse checks with severity
        self.checks = {}
        for check_name, check_cfg in cfg.get('checks', {}).items():
            self.checks[check_name] = {
                'enabled': check_cfg.get('enabled', True),
                'severity': check_cfg.get('severity', 'warning')
            }

        self.fuzzy_match_threshold = cfg.get('fuzzy_match_threshold', 85)
        self.approved_variables_file = cfg.get('approved_variables_file', 'data/approved_variables.csv')
        self.template_file = cfg['report']['template_file']
        self.output_file = cfg['report']['output_file']

def main():
    # Load configuration
    config = Config('config.yaml')

    # Run validator
    validator = JavaContextDataValidator(config)
    validator.run()

    # Exit with error code if there are errors
    if validator.has_errors:
        print("Validation failed due to errors in mandatory checks.")
        sys.exit(1)
    else:
        sys.exit(0)

if __name__ == '__main__':
    main()
